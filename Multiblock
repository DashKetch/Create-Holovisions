package com.example.createholovisions;

import net.minecraft.core.BlockPos;
import net.minecraft.core.Direction;
import net.minecraft.nbt.CompoundTag;
import net.minecraft.world.InteractionHand;
import net.minecraft.world.InteractionResult;
import net.minecraft.world.entity.player.Player;
import net.minecraft.world.item.ItemStack;
import net.minecraft.world.item.MapItem;
import net.minecraft.world.level.Level;
import net.minecraft.world.level.block.Block;
import net.minecraft.world.level.block.Blocks;
import net.minecraft.world.level.block.entity.BlockEntity;
import net.minecraft.world.level.block.state.BlockState;
import net.minecraft.world.level.material.Material;
import net.minecraftforge.client.model.data.ModelData;
import net.minecraftforge.energy.IEnergyStorage;
import net.minecraftforge.common.util.LazyOptional;
import net.minecraftforge.client.model.data.IModelData;
import net.minecraftforge.client.model.data.ModelProperty;
import com.mojang.blaze3d.vertex.PoseStack;
import com.mojang.blaze3d.systems.RenderSystem;
import net.minecraft.client.renderer.MultiBufferSource;
import net.minecraft.client.renderer.blockentity.BlockEntityRenderer;
import net.minecraft.client.renderer.blockentity.BlockEntityRendererProvider;
import net.minecraft.client.Minecraft;
import net.minecraft.client.renderer.texture.OverlayTexture;
import net.minecraft.world.level.saveddata.maps.MapItemSavedData;
import net.minecraft.resources.ResourceLocation;

public class HolovisionBlock extends Block {
    public HolovisionBlock() {
        super(Properties.of(Material.METAL).strength(5.0F, 10.0F));
    }

    @Override
    public boolean hasTileEntity(BlockState state) {
        return true;
    }

    @Override
    public BlockEntity createTileEntity(BlockState state, BlockPos pos) {
        return new HolovisionBlockEntity(pos, state);
    }

    @Override
    public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
        if (!world.isClientSide) {
            ItemStack heldItem = player.getItemInHand(hand);
            BlockEntity tileEntity = world.getBlockEntity(pos);
            if (tileEntity instanceof HolovisionBlockEntity) {
                if (heldItem.getItem() instanceof MapItem) {
                    int mapId = MapItem.getMapId(heldItem);
                    ((HolovisionBlockEntity) tileEntity).setDisplayedMap(mapId);
                    return InteractionResult.SUCCESS;
                } else if (heldItem.isEmpty()) {
                    ((HolovisionBlockEntity) tileEntity).clearDisplayedMap();
                    return InteractionResult.SUCCESS;
                }
            }
        }
        return InteractionResult.PASS;
    }
}

class HolovisionBlockEntity extends BlockEntity implements IEnergyStorage {
    private int energyStored;
    private final int maxEnergy = 10000;
    private boolean isStructureValid;
    private int displayedMapId = -1;

    public HolovisionBlockEntity(BlockPos pos, BlockState state) {
        super(ModTileEntities.HOLOVISION_BLOCK_ENTITY.get(), pos, state);
        this.energyStored = 0;
        this.isStructureValid = false;
    }

    public void setDisplayedMap(int mapId) {
        this.displayedMapId = mapId;
        setChanged();
    }

    public void clearDisplayedMap() {
        this.displayedMapId = -1;
        setChanged();
    }

    public int getDisplayedMapId() {
        return displayedMapId;
    }

    @Override
    public void saveAdditional(CompoundTag tag) {
        super.saveAdditional(tag);
        tag.putInt("DisplayedMapId", displayedMapId);
    }

    @Override
    public void load(CompoundTag tag) {
        super.load(tag);
        this.displayedMapId = tag.getInt("DisplayedMapId");
    }
}

class HolovisionRenderer implements BlockEntityRenderer<HolovisionBlockEntity> {
    private static final ResourceLocation MAP_BACKGROUND_TEXTURE = new ResourceLocation("textures/map/map_background.png");

    public HolovisionRenderer(BlockEntityRendererProvider.Context context) {}

    @Override
    public void render(HolovisionBlockEntity entity, float partialTicks, PoseStack poseStack, MultiBufferSource buffer, int combinedLight, int combinedOverlay) {
        int mapId = entity.getDisplayedMapId();
        if (mapId >= 0) {
            MapItemSavedData mapData = Minecraft.getInstance().level.getMapData("map_" + mapId);
            if (mapData != null) {
                RenderSystem.setShaderTexture(0, MAP_BACKGROUND_TEXTURE);
                poseStack.pushPose();
                poseStack.translate(0.5, 1.5, 0.5);
                poseStack.scale(1.0F, 1.0F, 1.0F);
                Minecraft.getInstance().gameRenderer.getMapRenderer().render(poseStack, buffer, mapId, mapData, true, combinedLight);
                poseStack.popPose();
            }
        }
    }
}
